<style>
div#bedlevelvisualizergraph div.modebar {
	left: 50%;
	transform: translateX(-50%);
}
</style>
<div class="row-fluid" id="bedlevelvisualizerwait" style="text-align: center;font-size: 25px;vertical-align: middle;" data-bind="visible: processing()"><i class="icon-spinner icon-spin icon-3"></i> <b>Please wait, retrieving current mesh.</b></div>
<div class="row-fluid" id="bedlevelvisualizerwarning" style="text-align: center;font-size: 25px;vertical-align: middle;" data-bind="visible: !loginStateViewModel.isUser()"><i class="icon-warning-sign icon-3" style="color:red"></i> <b>You must be logged in.</b></div>
<div class="row_fluid" id="bedlevelvisualizercommandmissing" data-bind="visible: settingsViewModel.settings.plugins.bedlevelvisualizer.command() == ''">
	<div class="row_fluid">
		<p>In order for this plugin to work properly, you must configure the GCODE commands necessary to send back a Bed Topography Report. Common examples are listed below.</p>
		<ul>
			<li>G29 T</li>
			<li>G81</li>
			<li>M420 V</li>
		</ul>
		<p>If you run into any problems please check the <a href="https://github.com/jneilliii/OctoPrint-BedLevelVisualizer/issues?utf8=%E2%9C%93&q=is%3Aissue" target="_blank">Issues</a> for possible fixes or report a bug.</p>
	</div>
	<div class="row_fluid">
		<div class="control-group">
			<label for="bedlevelvisualizer_command"><i class="icon icon-info-sign" title="GCODE commands to send to printer to retrieve grid data" data-toggle="tooltip"></i> GCODE Commands</label>
			<textarea class="input-block-level" id="bedlevelvisualizer_command" rows="4" data-bind="value: settingsViewModel.settings.plugins.bedlevelvisualizer.command"></textarea>
		</div>
	</div>
</div>
<div class="row-fluid" data-bind="visible: loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''">
	<div class="row-fluid" id="bedlevelvisualizergraph"></div>
	<div class="row-fluid" style="text-align: center;padding-top: 20px;" data-bind="visible: loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''"><small data-bind="text: mesh_status"></small></div>
	<div class="row-fluid" id="bedlevelvisualizerbutton" style="text-align: center;"><button class="btn" data-bind="click: updateMesh,enable: controlViewModel.isOperational() && !controlViewModel.isPrinting() && loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''"><i class="icon-2 icon-info-sign" data-bind="attr: {'title': mesh_status}" data-toggle="tooltip"></i> Update</button></div>

	<div style="padding-top: 5px;" class="row-fluid">
		<script type="text/html" id="Zdegree">
			<span  data-bind="text: '&nbsp;'+Math.abs($data.v).toFixed($data.n), style: {'color': $data.v > 0 ? 'red': ($data.v < 0 ? 'blue' : 'black')}, attr: {'title': $data.v > 0 ? 'turn wheel anticlockwise (left)': ($data.v < 0 ? 'turn wheel clockwise (right)' : '')}"></span>
		</script>

		<table style="border:1px solid black;margin-left:auto;margin-right:auto;">
			<thead>
				<tr>
					<th style="text-align: right; background-color:#f2f2f2;" >Deg.</th>
					<!-- ko foreach:  { data: $root.settingsViewModel.settings.plugins.bedlevelvisualizer.stored_mesh_x(), as: 'Xaxis', noChildContext: true }-->
						<th style="text-align: right; background-color:#f2f2f2; color: green;" data-bind="text: Xaxis"></th>
					<!-- /ko -->
				</tr>
			</thead>
			<tbody>
				<!-- ko foreach: { data: $root.settingsViewModel.settings.plugins.bedlevelvisualizer.stored_mesh(), as: 'Yaxis', noChildContext: true }-->
				<tr>
					<td style="text-align: right; font-weight: bold; background-color:#f2f2f2;" data-bind="text: $root.settingsViewModel.settings.plugins.bedlevelvisualizer.stored_mesh_y()[$index()]"></td>
					<!-- ko foreach:  { data: Yaxis, as: 'Zvalue', noChildContext: true }-->
						<td style="text-align: right;" data-bind="template: {name: 'Zdegree', data: {v:((parseFloat(Zvalue) - parseFloat($root.settingsViewModel.settings.plugins.bedlevelvisualizer.stored_mesh()[0][0]))) * parseFloat($root.settingsViewModel.settings.plugins.bedlevelvisualizer.screw_hub() || '0.5') * 360 , n:1, c:0}}">.</td>
					<!-- /ko -->
				</tr>
				<!-- /ko -->
			</tbody>
		</table>
	</div>
</div>