<div id="bedlevelvisualizer_webcam_container" data-bind="visible: processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.show_webcam() && settingsViewModel.webcam_streamUrl() != ''">
	<div id="bedlevelvisualizer_webcam_rotator" data-bind="css: { webcam_rotated: settingsViewModel.webcam_rotate90(), webcam_unrotated: !settingsViewModel.webcam_rotate90() }">
		<div class="webcam_fixed_ratio ratio43" data-bind="css: controlViewModel.webcamRatioClass">
			<div class="webcam_fixed_ratio_inner">
				<img data-bind="css: { flipH: settingsViewModel.webcam_flipH(), flipV: settingsViewModel.webcam_flipV() }, attr: { src: settingsViewModel.webcam_streamUrl() }" />
			</div>
		</div>
	</div>
</div>
<div class="row-fluid" id="bedlevelvisualizerwait" style="text-align: center;font-size: 25px;vertical-align: middle;padding-bottom: 25px;height: 465px;" data-bind="visible: processing() && (!settingsViewModel.settings.plugins.bedlevelvisualizer.show_webcam() || settingsViewModel.webcam_streamUrl() == '')">
	<div class="row-fluid" style="padding-top: 220px;">
		<i class="icon-spinner icon-spin icon-3"></i> <b>Please wait, retrieving current mesh.</b>
	</div>
</div>
<div class="row-fluid" id="bedlevelvisualizerwarning" style="text-align: center;font-size: 25px;vertical-align: middle;" data-bind="visible: !loginStateViewModel.isUser()"><i class="icon-warning-sign icon-3" style="color:red"></i> <b>You must be logged in.</b></div>
<div class="row_fluid" id="bedlevelvisualizercommandmissing" data-bind="visible: settingsViewModel.settings.plugins.bedlevelvisualizer.command() == ''">
	<div class="row_fluid">
		<p>In order for this plugin to work properly, you must configure the GCODE commands necessary to send back a Bed Topography Report. Common examples are listed below.</p>
		<ul>
			<li>G29 T</li>
			<li>G81</li>
			<li>M420 V</li>
		</ul>
		<p>If you run into any problems please check the <a href="https://github.com/jneilliii/OctoPrint-BedLevelVisualizer/issues?utf8=%E2%9C%93&q=is%3Aissue" target="_blank">Issues</a> for possible fixes or report a bug.</p>
	</div>
	<div class="row_fluid">
		<div class="control-group">
			<label for="bedlevelvisualizer_command"><i class="icon icon-info-sign" title="GCODE commands to send to printer to retrieve grid data" data-toggle="tooltip"></i> GCODE Commands</label>
			<textarea class="input-block-level" id="bedlevelvisualizer_command" rows="4" data-bind="value: settingsViewModel.settings.plugins.bedlevelvisualizer.command"></textarea>
		</div>
	</div>
</div>
<div class="row-fluid" data-bind="visible: loginStateViewModel.isUser() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''">
	<div class="row-fluid" id="bedlevelvisualizergraph" data-bind="visible: !processing()"></div>
	<div class="row-fluid" style="text-align: center;padding-top: 20px;" data-bind="visible: loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''"><small data-bind="text: mesh_status"></small></div>
	<div class="row-fluid" id="bedlevelvisualizerbutton" style="text-align: center;"><button class="btn" data-bind="click: !processing() ? updateMesh : cancelMeshUpdate, enable: controlViewModel.isOperational() && !controlViewModel.isPrinting() && loginStateViewModel.isUser() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== '', css: !processing() ? 'btn-primary' : 'btn-danger',attr: {'title': !processing() ? 'Run Mesh Update Process' : 'Cancel Mesh Update Process'}"><i class="icon-2 icon-info-sign" data-bind="attr: {'title': mesh_status}" data-toggle="tooltip"></i> <span data-bind="text: !processing() ? 'Update Mesh Now' : 'Cancel'"></span></button></div>
</div>


<!-- Container for mesh degrees -->
<div id="control-bedlevelvisualizer-custom" style="clear: both; display: none; padding-top: 10px; padding-bottom: 10px;" data-bind="visible: loginStateViewModel.isUser && settingsViewModel.settings.plugins.bedlevelvisualizer.commands().length > 0, template: { name: 'customBedLevelVisulizerControls_controlTemplate', foreach: settingsViewModel.settings.plugins.bedlevelvisualizer.commands }"></div>

<!-- Container for custom controls -->
<div data-bind="if: $root.showdegree && $root.mesh_data().length">
	<hr/>
	<h3>Bed Level Adjustment Guide</h3>
	<span data-bind="template: {name: 'bedlevelvisualize_meshtable', data: {mesh: $root.mesh_adjustment(), len: 0}}"></span>
</div>

<!-- Template for mesh degrees -->
<script type="text/html" id="bedlevelvisualize_meshtable">
	<table>
		<thead>
			<tr>
				<th style="text-align: right; background-color:#f2f2f2;" >y</th>
				<th style="text-align: center; background-color:#f2f2f2; color: normal;" data-bind="attr: { 'colspan': $root.mesh_data_x().length }">
					<!-- ko if: $data.len -->
						Mesh z heigth in:
						<select style="width: 5em;"
						oninput="this.value = Math.abs(parseFloat(this.value || 1.0));"
						type="number"
						size="1"
						data-bind="	value: $root.mesh_unit,
									options: [{mm: 1.0, name:'mm'}, {mm: 10.0, name:'cm'}, {mm: 25.4, name:'in'}],
									optionsCaption: '?',
									optionsValue: 'mm',
									optionsText: 'name',
									valueAllowUnset: false">
						</select>
					<!-- /ko -->
					<!-- ko ifnot: $data.len -->
						<div title="Click on meshpoint to normalize adjustment to that point.<br/>click this clear adjustment." data-toggle="tooltip" data-bind="click: function(){$root.mesh_zero(0);}">Adjustment angle</div>
					<!-- /ko -->
				</th>
			</tr>
		</thead>
		<tbody>
			<!-- ko foreach:  { data: $root.mesh_data_y(), noChildContext: true }-->
				<tr>
					<th style="text-align: right; background-color:#f2f2f2;" data-bind="text: $root.mesh_data_y()[$root.descending_y()?$root.mesh_data_y().length-1-$index():$index()]"></th>
					<!-- ko foreach:  { data: $parent.mesh[$root.descending_y()?$root.mesh_data_y().length-1-$index():$index()], as: 'Zvalue', noChildContext: true }-->
					<!-- {# angle math #} -->
						<td style="text-align: right; padding-left: 0.5em;"
							data-bind="
								text: (!$parentContext.$parent.len?
									Math.abs(parseFloat(	$parentContext.$parent.mesh[$root.descending_y()?
										$root.mesh_data_y().length-1-$parentContext.$index():
										$parentContext.$index()][$root.descending_x()?
											$root.mesh_data_x().length-1-$index():
											$index()])):
										parseFloat($parentContext.$parent.mesh[$root.descending_y()?
											$root.mesh_data_y().length-1-$parentContext.$index():
											$parentContext.$index()][$root.descending_x()?
												$root.mesh_data_x().length-1-$index():
												$index()])).toFixed($parentContext.$parent.len),
								click: function(){$root.mesh_zero($root.mesh_data()[$root.descending_y()?
									$root.mesh_data_y().length-1-$parentContext.$index():
										$parentContext.$index()][$root.descending_x()?
											$root.mesh_data_x().length-1-$index():
											$index()]);},
								style: {'color' : ['blue','black','red'][1+Math.sign(parseFloat($parentContext.$parent.mesh[$root.descending_y()?
									$root.mesh_data_y().length-1-$parentContext.$index():$parentContext.$index()][$root.descending_x()?
										$root.mesh_data_x().length-1-$index():
										$index()]))]},
								attr: {'title' : $parentContext.$parent.len ?
									'Z height' :
									!parseFloat($parentContext.$parent.mesh[$root.descending_y()?
										$root.mesh_data_y().length-1-$parentContext.$index():
										$parentContext.$index()][$root.descending_x()?
											$root.mesh_data_x().length-1-$index():
											$index()]) ?
												'-' : (
												(parseFloat($parentContext.$parent.mesh[$root.descending_y()?
													$root.mesh_data_y().length-1-$parentContext.$index():
													$parentContext.$index()][$root.descending_x()?
														$root.mesh_data_x().length-1-$index():
														$index()])<0? 'raise' : 'lower') +
											' bed: move wheel ' +
											Math.round(Math.abs(parseFloat($parentContext.$parent.mesh[$root.descending_y()?
												$root.mesh_data_y().length-1-$parentContext.$index():
												$parentContext.$index()][$root.descending_x()?
													$root.mesh_data_x().length-1-$index():
													$index()]))/36)/10 + ' ' +
											'turn'+(!Math.trunc(Math.abs(parseFloat($parentContext.$parent.mesh[$root.descending_y()?
												$root.mesh_data_y().length-1-$parentContext.$index():
												$parentContext.$index()][$root.descending_x()?
													$root.mesh_data_x().length-1-$index():
													$index()]))/360) ? '' : 's') + ' ' +
											(parseFloat($parentContext.$parent.mesh[$root.descending_y()?
												$root.mesh_data_y().length-1-$parentContext.$index():
												$parentContext.$index()][$root.descending_x()?
													$root.mesh_data_x().length-1-$index():
													$index()])<0 ^ $root.reverse() ?
														'clockwise (right)' :
														'anticlockwise (left)')
									)
								}">
						</td>
					<!-- /ko -->
				</tr>
			<!-- /ko -->
		</tbody>
		<tfoot>
			<tr>
				<th style="text-align: right; background-color:#f2f2f2; color: green;" >x</th>
				<!-- ko foreach:  { data: ko.utils.range(0,$root.mesh_data_x().length-1), as: 'Xindex', noChildContext: true }-->
					<th style="text-align: right; background-color:#f2f2f2; color: green;" data-bind="text: $root.mesh_data_x()[$root.descending_x()?$root.mesh_data_x().length-1-$index():$index()]"></th>
				<!-- /ko -->
			</tr>
		</tfoot>
	</table>
	<div style="padding-top: 5px;" class="row-fluid">
		<div class="control-group span2">
			<div style="font-weight: bold; color: green;">x - Position</div>
		</div>
		<div class="control-group span2">
			<div style="font-weight: bold; color: normal;">y - Position</div>
		</div>
		<div class="control-group span8" title="Printer bed leveling screws turn direction." data-toggle="tooltip">
			<!-- ko if: $data.len -->
				<span style="color: normal;">Z height: </span>
				<span style="color: blue;">below offset</span>
				<span style="color: normal;"> / </span>
				<span style="color: red;">above offset</span>
			<!-- /ko -->
			<!-- ko ifnot: $data.len -->
				<span style="color: normal;">Turn direction - </span>
				<span style="color: blue;" data-bind="text: $root.reverse()?'anticlockwise (left)':'clockwise (right)'"></span>
				<span style="color: normal;"> / </span>
				<span style="color: red;"  data-bind="text: !$root.reverse()?'anticlockwise (left)':'clockwise (right)'"></span>
			<!-- /ko -->
		</div>
	</div>
</script>

<!-- Template for custom controls -->
<script type="text/html" id="customBedLevelVisulizerControls_controlTemplate">
	<!-- ko template: { name: 'customBedLevelVisulizerControls_controlTemplate_input', data: $data, if: $data.command().length > 0 } --><!-- /ko -->
</script>

<!-- Template for inputs -->
<script type="text/html" id="customBedLevelVisulizerControls_controlTemplate_input">
	<div class="btn-group" style="display: inline-block; margin-left: 0px; margin-bottom: 5px;">
	<!-- ko foreach: input -->
		<button style="cursor: default" data-bind="text: label, enable: $root.controlViewModel.isOperational() && (!$root.controlViewModel.isPrinting() || $parent.enabled_while_printing()) && (!$root.processing() || $parent.enabled_while_graphing)" class="btn"></button>
		<input type="text" class="input-mini btn active" style="cursor: text;margin-bottom: 0px;" data-bind="attr: {placeholder: label, title: value}, value: value, enable: $root.controlViewModel.isOperational() && (!$root.controlViewModel.isPrinting() || $parent.enabled_while_printing()) && (!$root.processing() || $parent.enabled_while_graphing)">
	<!-- /ko -->
		<!-- ko template: { name: 'customBedLevelVisulizerControls_controlTemplate_command', data: $data} --><!-- /ko -->
	</div>
</script>

<!-- Template for button -->
<script type="text/html" id="customBedLevelVisulizerControls_controlTemplate_command">
	<button class="btn" data-bind="click: $root.runCustomCommand, attr: {title: (tooltip() ? tooltip : command)}, enable: $root.controlViewModel.isOperational() && (!$root.controlViewModel.isPrinting() || enabled_while_printing()) && (!$root.processing() || enabled_while_graphing)"><i data-bind="css: icon"></i> <span data-bind="text: label"/></button>
</script>

