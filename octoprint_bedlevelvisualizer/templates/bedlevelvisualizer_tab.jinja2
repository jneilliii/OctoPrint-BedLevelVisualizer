<style>
div#bedlevelvisualizergraph div.modebar {
	left: 50%;
	transform: translateX(-50%);
}
</style>
<div class="row-fluid" id="bedlevelvisualizerwait" style="text-align: center;font-size: 25px;vertical-align: middle;" data-bind="visible: processing()"><i class="icon-spinner icon-spin icon-3"></i> <b>Please wait, retrieving current mesh.</b></div>
<div class="row-fluid" id="bedlevelvisualizerwarning" style="text-align: center;font-size: 25px;vertical-align: middle;" data-bind="visible: !loginStateViewModel.isUser()"><i class="icon-warning-sign icon-3" style="color:red"></i> <b>You must be logged in.</b></div>
<div class="row_fluid" id="bedlevelvisualizercommandmissing" data-bind="visible: settingsViewModel.settings.plugins.bedlevelvisualizer.command() == ''">
	<div class="row_fluid">
		<p>In order for this plugin to work properly, you must configure the GCODE commands necessary to send back a Bed Topography Report. Common examples are listed below.</p>
		<ul>
			<li>G29 T</li>
			<li>G81</li>
			<li>M420 V</li>
		</ul>
		<p>If you run into any problems please check the <a href="https://github.com/jneilliii/OctoPrint-BedLevelVisualizer/issues?utf8=%E2%9C%93&q=is%3Aissue" target="_blank">Issues</a> for possible fixes or report a bug.</p>
	</div>
	<div class="row_fluid">
		<div class="control-group">
			<label for="bedlevelvisualizer_command"><i class="icon icon-info-sign" title="GCODE commands to send to printer to retrieve grid data" data-toggle="tooltip"></i> GCODE Commands</label>
			<textarea class="input-block-level" id="bedlevelvisualizer_command" rows="4" data-bind="value: settingsViewModel.settings.plugins.bedlevelvisualizer.command"></textarea>
		</div>
	</div>
</div>
<div class="row-fluid" data-bind="visible: loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''">
	<div class="row-fluid" id="bedlevelvisualizergraph"></div>
	<div class="row-fluid" style="text-align: center;padding-top: 20px;" data-bind="visible: loginStateViewModel.isUser() && !processing() && settingsViewModel.settings.plugins.bedlevelvisualizer.command() !== ''"><small data-bind="text: mesh_status"></small></div>
	<div class="row-fluid" id="bedlevelvisualizerbutton" style="text-align: center;">
		<button class="btn" data-bind="click: readMesh,   visible: (settingsViewModel.settings.plugins.bedlevelvisualizer.read().trim() || '') !== '',   enable: controlViewModel.isOperational() && loginStateViewModel.isUser() && !processing()"><i class="icon-2 icon-info-sign" title="Click to read mash data from printer EEPROM" data-toggle="tooltip"></i> Read</button>
		<button class="btn" data-bind="click: updateMesh, visible: (settingsViewModel.settings.plugins.bedlevelvisualizer.command().trim() || '')!== '', enable: controlViewModel.isOperational() && !controlViewModel.isPrinting() && loginStateViewModel.isUser() && !processing()"><i class="icon-2 icon-info-sign" title="Cleck to create mesh data and save to printer EEPROM" data-toggle="tooltip"></i> Create</button>
	</div>
	<div style="padding-top: 5px;" class="row-fluid" data-bind="if: $root.showdegree">
		<table style="margin-left:auto; margin-right:auto;" data-bind="template: {name: 'bedlevelvisualize_meshtable', data: {mesh: $root.mesh_adjustment(), len: 0}}"></table>
	</div>
</div>